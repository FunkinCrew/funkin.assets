import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.util.FlxTimerManager;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.play.cutscene.CutsceneType;
import funkin.play.GameOverSubState;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.Song;
import funkin.play.stage.StageProp;
import funkin.save.Save;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import funkin.util.TouchUtil;
import funkin.ui.FullScreenScaleMode;
import funkin.play.PauseMode;

// We have to use FlxBasePoint in scripts because FlxPoint is inlined and not available in scripts
class EggnogSong extends Song
{
  // var santaDead:ScriptedFlxAtlasSprite;
  var hasPlayedCutscene:Bool = false;
  var cutsceneSkipped:Bool = false;
  var canPauseCutscene:Bool = false;
  var santaSound:FunkinSound;
  var shootSound:FunkinSound;

  var debugTesting:Bool = false;

  var cutsceneTimerManager:FlxTimerManager;
  var isMobilePauseButtonPressed:Bool = false;

  var santaDead:ScriptedFlxAtlasSprite = null;
  var parentsShoot:ScriptedFlxAtlasSprite = null;

  function new()
  {
    super('eggnog');
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void
  {
    super.onCountdownStart(event);
    trace(PlayState.instance.currentVariation);
  }

  function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);
  }

  public override function isSongNew(currentDifficulty:String, currentVariation:String):Bool
  {
    return false;
  }

  public override function listAltInstrumentalIds(difficultyId:String, variationId:String):Array<String>
  {
    if (difficultyId == 'easy' || difficultyId == 'normal' || difficultyId == 'hard')
    {
      var hasBeatenPicoMix = Save.instance.hasBeatenSong(this.id, null, 'pico');

      switch (variationId)
      {
        case 'pico':
          // return hasBeatenPicoMix ? [''] : [];
          // No Pico mix on BF instrumental, sorry!
          return [];
        default:
          return hasBeatenPicoMix ? ['pico'] : [];
      }
    }
  }

  public override function onSongEnd(event:CountdownScriptEvent):Void
  {
    super.onSongEnd(event);
    if (PlayState.instance.currentVariation != 'erect') hasPlayedCutscene = true;
    // only play this on erect..

    if (!hasPlayedCutscene)
    {
      hasPlayedCutscene = true;

      event.cancel();

      // start the video cutscene and hide it so the other stuff can happen after
      startCutscene();
    }
    else
    {
      // Make sure the cutscene can play again next time!
      hasPlayedCutscene = false;
      // DO NOT CANCEL THE EVENT!
    }
  }

  function startCutscene()
  {
    cutsceneTimerManager = new FlxTimerManager();

    var normalSanta = PlayState.instance.currentStage.getNamedProp('santa');
    normalSanta.visible = false;

    santaDead = ScriptedFlxAtlasSprite.init('SantaDiesSprite', 0, 0);

    santaDead.x = -458;
    santaDead.y = 498;
    santaDead.zIndex = normalSanta.zIndex - 1;
    santaDead.shader = normalSanta.shader;

    PlayState.instance.currentStage.add(santaDead);
    PlayState.instance.currentStage.refresh(); // Apply z-index.

    santaDead.scriptCall('playCutscene');

    PlayState.instance.currentStage.getDad().visible = false;
    parentsShoot = ScriptedFlxAtlasSprite.init('DadShootsSprite', 0, 0);

    parentsShoot.x = -516;
    parentsShoot.y = 503;
    parentsShoot.zIndex = santaDead.zIndex - 1;
    parentsShoot.shader = normalSanta.shader;

    PlayState.instance.currentStage.add(parentsShoot);
    PlayState.instance.currentStage.refresh(); // Apply z-index.

    parentsShoot.scriptCall('playCutscene');

    // FlxTween.tween(PlayState.instance.camHUD, {alpha: 0}, 1);

    PlayState.instance.isInCutscene = true;
    hasPlayedCutscene = true;

    PlayState.instance.currentStage.getBoyfriend().danceEvery = 0;
    PlayState.instance.currentStage.getDad().danceEvery = 0;

    PlayState.instance.tweenCameraToPosition(santaDead.x + 300, santaDead.y, 2.8, FlxEase.expoOut);
    // PlayState.instance.tweenCameraToPosition(santaDead.x + 300, santaDead.y, 2.8, FlxEase.expoOut);
    PlayState.instance.tweenCameraZoom(0.73, 2, true, FlxEase.quadInOut);

    santaSound = FunkinSound.load(Paths.sound('santa_emotion'), 1);
    santaSound.volume = 1;
    santaSound.play(false);

    shootSound = FunkinSound.load(Paths.sound('santa_shot_n_falls'), 1);
    shootSound.volume = 1;

    new FlxTimer(cutsceneTimerManager).start(2.8, function(tmr) {
      PlayState.instance.tweenCameraToPosition(santaDead.x + 150, santaDead.y, 9, FlxEase.quartInOut);
      PlayState.instance.tweenCameraZoom(0.79, 9, true, FlxEase.quadInOut);
    });

    new FlxTimer(cutsceneTimerManager).start(11.3, function(tmr) {
      // PlayState.instance.tweenCameraZoom(0.73, 0.8, true, FlxEase.backOut);
      // PlayState.instance.tweenCameraToPosition(santaDead.x + 220, santaDead.y, 0.8, FlxEase.expoOut);
      // PlayState.instance.camGame.shake(0.007, 0.4);
    });

    new FlxTimer(cutsceneTimerManager).start(11.375, function(tmr) {
      shootSound.play(false);
    });

    new FlxTimer(cutsceneTimerManager).start(12.83, function(tmr) {
      PlayState.instance.camGame.shake(0.005, 0.2);
      PlayState.instance.tweenCameraToPosition(santaDead.x + 160, santaDead.y + 80, 5, FlxEase.expoOut);
    });

    new FlxTimer(cutsceneTimerManager).start(15, function(tmr) {
      PlayState.instance.camHUD.fade(0xFF000000, 1, false, null, true);
    });

    new FlxTimer(cutsceneTimerManager).start(16, function(tmr) {
      canPauseCutscene = false;
      PlayState.instance.camHUD.fade(0xFF000000, 0.5, true, null, true);
      PlayState.instance.endSong(true);
    });
  }

  function onUpdate(event:UpdateScriptEvent)
  {
    super.onUpdate(event);

    if(cutsceneTimerManager != null && cutsceneTimerManager.active) cutsceneTimerManager.update(event.elapsed);

    if (FlxG.onMobile)
    {
      isMobilePauseButtonPressed = TouchUtil.overlapsComplex(PlayState.instance.pauseButton) && TouchUtil.justPressed;
    }

    if (PlayState.instance.isInCutscene)
    {
      if ((PlayState.instance.controls.PAUSE || isMobilePauseButtonPressed) && canPauseCutscene)
      {
        cutsceneTimerManager.active = false;

        PlayState.instance.preparePauseUI();
        PlayState.instance.openPauseSubState(PauseMode.Cutscene(
          'Cutscene', 'In-Game Cutscene',
          resumeCutscene, skipCutscene, restartCutscene
        ), FullScreenScaleMode.hasFakeCutouts ? PlayState.instance.camCutouts : PlayState.instance.camCutscene, null);
      }
    }
  }

  public function resumeCutscene():Void
  {
    cutsceneTimerManager.active = true;
  }

  public function skipCutscene():Void
  {
    canPauseCutscene = false;
    PlayState.instance.camCutscene.fade(0xFF000000, 0.5, false, null, true);

    santaSound.stop();
    shootSound.stop();

    new FlxTimer().start(0.5, function(tmr) {
      PlayState.instance.endSong(true);
    });
  }

  public function restartCutscene():Void
  {
    cutsceneTimerManager.destroy();
    cutsceneTimerManager = null;

    santaDead.destroy();
    santaDead = null;

    parentsShoot.destroy();
    parentsShoot = null;

    santaSound.destroy();
    santaSound = null;

    shootSound.destroy();
    shootSound = null;

    startCutscene();
  }

  /**
   * Replay the cutscene after leaving the song.
   */
  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);
    cutsceneSkipped = false;
    canPauseCutscene = true;
    hasPlayedCutscene = false;
  }
}
